"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./stores/useStore.ts":
/*!****************************!*\
  !*** ./stores/useStore.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\nconst useStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        currentUser: null,\n        isAuthenticated: false,\n        token: null,\n        users: [],\n        projets: [],\n        demandes: [],\n        articles: [],\n        notifications: [],\n        history: [],\n        isLoading: false,\n        error: null,\n        login: async (email, password)=>{\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const response = await fetch(\"/api/auth/login\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        email,\n                        password\n                    })\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set({\n                        currentUser: result.data.user,\n                        token: result.data.token,\n                        isAuthenticated: true,\n                        isLoading: false\n                    });\n                    return true;\n                } else {\n                    set({\n                        error: result.error,\n                        isLoading: false\n                    });\n                    return false;\n                }\n            } catch (error) {\n                console.error(\"Erreur de connexion:\", error);\n                set({\n                    error: \"Erreur de connexion\",\n                    isLoading: false\n                });\n                return false;\n            }\n        },\n        logout: ()=>{\n            set({\n                currentUser: null,\n                isAuthenticated: false,\n                token: null,\n                users: [],\n                projets: [],\n                demandes: [],\n                notifications: [],\n                history: []\n            });\n        },\n        loadUsers: async ()=>{\n            const { currentUser, token } = get();\n            if (!currentUser || !token) {\n                console.warn(\"Tentative de chargement des utilisateurs sans utilisateur connecté\");\n                return;\n            }\n            try {\n                const response = await fetch(\"/api/users\", {\n                    headers: {\n                        \"Authorization\": \"Bearer \".concat(token)\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set({\n                        users: result.data\n                    });\n                } else {\n                    console.error(\"Erreur API users:\", result.error);\n                    set({\n                        error: result.error\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement des utilisateurs:\", error);\n                set({\n                    error: \"Erreur lors du chargement des utilisateurs\"\n                });\n            }\n        },\n        loadProjets: async ()=>{\n            const { currentUser } = get();\n            if (!currentUser) {\n                console.warn(\"Tentative de chargement des projets sans utilisateur connecté\");\n                return;\n            }\n            try {\n                console.log(\"Chargement des projets pour l'utilisateur:\", currentUser.id);\n                const response = await fetch(\"/api/projets\", {\n                    headers: {\n                        \"x-user-id\": currentUser.id\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    console.log(\"Projets chargés:\", result.data.length);\n                    set({\n                        projets: result.data\n                    });\n                } else {\n                    console.error(\"Erreur API projets:\", result.error);\n                    set({\n                        error: result.error\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement des projets:\", error);\n                set({\n                    error: \"Erreur lors du chargement des projets\"\n                });\n            }\n        },\n        loadDemandes: async function() {\n            let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n            const { currentUser } = get();\n            if (!currentUser) {\n                console.warn(\"Tentative de chargement des demandes sans utilisateur connecté\");\n                return;\n            }\n            try {\n                console.log(\"Chargement des demandes pour l'utilisateur:\", currentUser.id);\n                const params = new URLSearchParams();\n                Object.entries(filters).forEach((param)=>{\n                    let [key, value] = param;\n                    if (value) params.append(key, String(value));\n                });\n                const response = await fetch(\"/api/demandes?\".concat(params), {\n                    headers: {\n                        \"x-user-id\": currentUser.id\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    console.log(\"Demandes chargées:\", result.data.length);\n                    set({\n                        demandes: result.data\n                    });\n                } else {\n                    console.error(\"Erreur API demandes:\", result.error);\n                    set({\n                        error: result.error\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement des demandes:\", error);\n                set({\n                    error: \"Erreur lors du chargement des demandes\"\n                });\n            }\n        },\n        loadArticles: async function() {\n            let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n            const { currentUser } = get();\n            if (!currentUser) {\n                console.warn(\"Tentative de chargement des articles sans utilisateur connecté\");\n                return;\n            }\n            try {\n                const params = new URLSearchParams();\n                Object.entries(filters).forEach((param)=>{\n                    let [key, value] = param;\n                    if (value) params.append(key, String(value));\n                });\n                const response = await fetch(\"/api/articles?\".concat(params), {\n                    headers: {\n                        \"x-user-id\": currentUser.id\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set({\n                        articles: result.data\n                    });\n                } else {\n                    console.error(\"Erreur API articles:\", result.error);\n                    set({\n                        error: result.error\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement des articles:\", error);\n                set({\n                    error: \"Erreur lors du chargement des articles\"\n                });\n            }\n        },\n        loadNotifications: async ()=>{\n            const { currentUser } = get();\n            if (!currentUser) return;\n            try {\n                const response = await fetch(\"/api/notifications\", {\n                    headers: {\n                        \"x-user-id\": currentUser.id\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set({\n                        notifications: result.data\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement des notifications:\", error);\n            }\n        },\n        loadHistory: async function() {\n            let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n            const { currentUser } = get();\n            if (!currentUser) return;\n            try {\n                const params = new URLSearchParams();\n                Object.entries(filters).forEach((param)=>{\n                    let [key, value] = param;\n                    if (value) params.append(key, String(value));\n                });\n                const response = await fetch(\"/api/historique?\".concat(params), {\n                    headers: {\n                        \"x-user-id\": currentUser.id\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set({\n                        history: result.data\n                    });\n                }\n            } catch (error) {\n                console.error(\"Erreur lors du chargement de l'historique:\", error);\n            }\n        },\n        createUser: async (userData)=>{\n            const { currentUser } = get();\n            if (!currentUser) return false;\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const response = await fetch(\"/api/users\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-user-id\": currentUser.id\n                    },\n                    body: JSON.stringify(userData)\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set((state)=>({\n                            users: [\n                                ...state.users,\n                                result.data\n                            ],\n                            isLoading: false\n                        }));\n                    return true;\n                } else {\n                    set({\n                        error: result.error,\n                        isLoading: false\n                    });\n                    return false;\n                }\n            } catch (error) {\n                console.error(\"Erreur création utilisateur:\", error);\n                set({\n                    error: \"Erreur lors de la création de l'utilisateur\",\n                    isLoading: false\n                });\n                return false;\n            }\n        },\n        createProjet: async (projetData)=>{\n            const { currentUser } = get();\n            if (!currentUser) return false;\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const response = await fetch(\"/api/projets\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-user-id\": currentUser.id\n                    },\n                    body: JSON.stringify(projetData)\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set((state)=>({\n                            projets: [\n                                ...state.projets,\n                                result.data\n                            ],\n                            isLoading: false\n                        }));\n                    return true;\n                } else {\n                    set({\n                        error: result.error,\n                        isLoading: false\n                    });\n                    return false;\n                }\n            } catch (error) {\n                console.error(\"Erreur création projet:\", error);\n                set({\n                    error: \"Erreur lors de la création du projet\",\n                    isLoading: false\n                });\n                return false;\n            }\n        },\n        createDemande: async (demandeData)=>{\n            const { currentUser } = get();\n            if (!currentUser) return false;\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const response = await fetch(\"/api/demandes\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-user-id\": currentUser.id\n                    },\n                    body: JSON.stringify(demandeData)\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set((state)=>({\n                            demandes: [\n                                ...state.demandes,\n                                result.data\n                            ],\n                            isLoading: false\n                        }));\n                    return true;\n                } else {\n                    set({\n                        error: result.error,\n                        isLoading: false\n                    });\n                    return false;\n                }\n            } catch (error) {\n                console.error(\"Erreur création demande:\", error);\n                set({\n                    error: \"Erreur lors de la création de la demande\",\n                    isLoading: false\n                });\n                return false;\n            }\n        },\n        executeAction: async function(demandeId, action) {\n            let data = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            const { currentUser } = get();\n            if (!currentUser) return false;\n            try {\n                const response = await fetch(\"/api/demandes/\".concat(demandeId, \"/actions\"), {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"x-user-id\": currentUser.id\n                    },\n                    body: JSON.stringify({\n                        action,\n                        ...data\n                    })\n                });\n                const result = await response.json();\n                if (result.success) {\n                    // Mettre à jour la demande dans le store\n                    set((state)=>({\n                            demandes: state.demandes.map((d)=>d.id === demandeId ? result.data.demande : d),\n                            notifications: result.data.notification ? [\n                                result.data.notification,\n                                ...state.notifications\n                            ] : state.notifications,\n                            history: result.data.historyEntry ? [\n                                result.data.historyEntry,\n                                ...state.history\n                            ] : state.history\n                        }));\n                    return true;\n                } else {\n                    set({\n                        error: result.error\n                    });\n                    return false;\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de l'exécution de l'action:\", error);\n                set({\n                    error: \"Erreur lors de l'exécution de l'action\"\n                });\n                return false;\n            }\n        },\n        markNotificationAsRead: async (id)=>{\n            const { currentUser } = get();\n            if (!currentUser) return;\n            try {\n                const response = await fetch(\"/api/notifications/\".concat(id, \"/read\"), {\n                    method: \"PUT\",\n                    headers: {\n                        \"x-user-id\": currentUser.id\n                    }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set((state)=>({\n                            notifications: state.notifications.map((n)=>n.id === id ? {\n                                    ...n,\n                                    lu: true\n                                } : n)\n                        }));\n                }\n            } catch (error) {\n                console.error(\"Erreur lors de la mise à jour de la notification:\", error);\n            }\n        },\n        setLoading: (loading)=>set({\n                isLoading: loading\n            }),\n        setError: (error)=>set({\n                error\n            }),\n        setDemandes: (demandes)=>set({\n                demandes\n            }),\n        setArticles: (articles)=>set({\n                articles\n            }),\n        addDemande: (demande)=>set((state)=>({\n                    demandes: [\n                        ...state.demandes,\n                        demande\n                    ]\n                })),\n        updateDemande: (id, demande)=>set((state)=>({\n                    demandes: state.demandes.map((d)=>d.id === id ? demande : d)\n                })),\n        addNotification: (notification)=>set((state)=>({\n                    notifications: [\n                        notification,\n                        ...state.notifications\n                    ]\n                })),\n        addHistoryEntry: (entry)=>set((state)=>({\n                    history: [\n                        entry,\n                        ...state.history\n                    ]\n                }))\n    }), {\n    name: \"gestion-demandes-achat-storage\",\n    partialize: (state)=>({\n            currentUser: state.currentUser,\n            isAuthenticated: state.isAuthenticated,\n            token: state.token\n        })\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./stores/useStore.ts\n"));

/***/ })

});